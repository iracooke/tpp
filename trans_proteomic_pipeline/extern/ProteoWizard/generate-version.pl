#!/usr/bin/env perl

#
# Mimics the jam-based version generation for pwiz by
# getting the current major and minor revs from Jamroot.jam,
# just like the bjam build does
#
sub gather_versioninfo; # forward declaration
use Cwd abs_path;

print "generate-version.pl: create various Version.cpp files as in bjam build\n" ;

$mode = "" ;
if ($#ARGV >= 0) {
	$mode = $ARGV[0] ;
}
sub showoptions() {
	print "options:\n" ;
	print "  --clean	just deletes the files it knows how to make\n" ;
	print "  --help	provides the help text you're reading now\n" ;
}

if (( $mode eq "--help") || ($mode eq "-h")) {
	print "Mimics the jam-based version generation for pwiz: \n" ;
	print "gets the current major and minor revs from Jamroot.jam, \n" ;
	print "just like the bjam build does. \n" ;
	print "Won't overwrite existing files.\n";
	showoptions() ;
	exit 0 ;
} elsif ( $mode eq "" ) {
	# standard behavior
} elsif ( $mode ne "--clean" ) {
	print "unknown option \"" . $mode ."\", quit\n" ;
	showoptions() ;
	exit 1 ;
}

$PWIZ_ROOT_PATH=abs_path(dirname($0)."/pwiz") ;

my ( $majorVer, $minorVer, $revisionNum ) = ();

if ( $mode ne "--clean") {
	gather_versioninfo() ; # try to hit subversion for info
}


generate_version( $PWIZ_ROOT_PATH."/pwiz/Version.cpp",  "pwiz" , "" ) ;
generate_version( $PWIZ_ROOT_PATH."/pwiz/data/msdata/Version.cpp",  "pwiz" , "msdata" ) ;
generate_version( $PWIZ_ROOT_PATH."/pwiz/analysis/Version.cpp",  "pwiz" , "analysis" ) ;
generate_version( $PWIZ_ROOT_PATH."/pwiz/data/identdata/Version.cpp",  "pwiz" , "identdata" ) ;
generate_version( $PWIZ_ROOT_PATH."/pwiz/data/tradata/Version.cpp",  "pwiz" , "tradata" ) ;
generate_version( $PWIZ_ROOT_PATH."/pwiz/data/proteome/Version.cpp",  "pwiz" , "proteome" ) ;
use File::Basename;

sub gather_versioninfo() {

	# Get version information out of VERSION file
	my($file)=$PWIZ_ROOT_PATH."/VERSION" ;
	print "attempting to read  version info from $file..." ;
	open R_FILE, "<$file" or die $!;
	( $majorVer, $minorVer, $revisionNum ) = split( /\./, <R_FILE> );
	close R_FILE;
	print "ok\n" ;

	# Check version information against Jamroot.jam file
	($file)=$PWIZ_ROOT_PATH."/Jamroot.jam" ;
	print "checking version info with $file... " ;
	open R_FILE, "<$file" or die $!;
	while(my $line = <R_FILE>){
	  if($line =~ /PWIZ_MAJOR :\s(\d+)/ && $majorVer != $1 ){
		die "major version number mismatch ($1 != $majorVer)\n";
	  }
	  if($line =~ /PWIZ_MINOR :\s(\d+)/ && $minorVer != $1 ){
		die "minor version number mismatch ($1 != $minorVer)\n";
	  }
	}
	close R_FILE;
	print "ok\n" ;

	# get the TPP SVN version info if possible
	print "attempting to read revision info from Subversion... " ;
	$tppRevisionNum = 0 ;
	$tppRevisionDate = "0-0-0 (unknown revision)" ;
	my(@lines) = `svn info $PWIZ_ROOT_PATH` ;
	foreach $line (@lines) {
		if ( $line =~ m/Revision: (\w+)/ ) {
		$tppRevisionNum = $1 ;
		}
		if ( $line =~ m/Last Changed Date: (\w+-\w+-\w+)/ ) {
		$tppRevisionDate = $1 ;
		}
	}
	if ( $tppRevisionNum != 0 ) {
		print "ok\n";
	} else {
		print "WARNING: proceeding without SVN revision number, not a major problem\n" ;
	}
}

sub generate_version { # args are filename, namespace, sub-namespace
	if ($mode eq "--clean") {
		if (-e $_[0]) {
			print "deleting $_[0]... " ;
			unlink $_[0] ;
			print "ok\n" ;
		}
		return ;
	}
	if (-d dirname($_[0]) && (! (-e $_[0])) ) {
		my($namespace_header);
		my($namespace_footer);
		if ("" eq $_[2]) {
			$namespace_header = "namespace ".$_[1]."{\n" ;
			$namespace_footer = "} // namespace ".$_[1] ;
		} else {
			$namespace_header = "namespace ".$_[1]."{\nnamespace ".$_[2]."{" ;
			$namespace_footer = "} // namespace ".$_[2]."\n} // namespace ".$_[1] ;
		}

		print "writing $_[0]... " ;
		open (OF, ">$_[0]") or die $! ;
		print OF "// This file was generated by the \"generate_version.pl\" utility\n" ;
		print OF "// You should not modify it manually, as it may be re-generated.\n" ;
		print OF "//\n" ;
		print OF "\n" ;
		print OF "#include \"Version.hpp\"\n" ;
		print OF "#include <sstream>\n" ;
		print OF "\n" ;
		print OF "#ifdef PWIZ_USER_VERSION_INFO_H // in case you need to add any info version of your own\n" ;
		print OF "#include PWIZ_USER_VERSION_INFO_H  // must define PWIZ_USER_VERSION_INFO_H_STR for use below\n" ;
		print OF "#endif\n" ;
		print OF "\n" ;
		print OF $namespace_header ."\n" ;
		print OF "\n" ;
		print OF "int Version::Major()                {return ".$majorVer.";}\n" ;
		print OF "int Version::Minor()                {return ".$minorVer.";}\n" ;
		print OF "int Version::Revision()             {return ".$revisionNum.";}\n" ;
		print OF "std::string Version::LastModified() {return \"".$tppRevisionDate."\";}\n" ;
		print OF "std::string Version::str()\n" ;
		print OF "{\n" ;
		print OF "       std::ostringstream v;\n" ;
		print OF "       v << Major() << '.' << Minor() << '.' << Revision();\n" ;
		print OF "#ifdef PWIZ_USER_VERSION_INFO_H\n" ;
		print OF "       v << \" (\" << PWIZ_USER_VERSION_INFO_H_STR << \")\";\n" ;
		print OF "#endif\n" ;
		print OF "       return v.str();\n" ;
		print OF "}\n" ;
		print OF "\n" ;
		print OF $namespace_footer."\n" ;
		print OF ";\n" ;
		close OF;
		print "ok\n";
	} 
}
